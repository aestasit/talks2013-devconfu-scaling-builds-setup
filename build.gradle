
project.ext {
  jenkinsVersion = '1.539'
  jenkinsWar = 'jenkins.war'
}

task deleteJenkins << {
  ant.delete(dir: './jenkins_home')
}

task createDirectories << {
  ant.mkdir(dir: './jenkins_home/plugins')
  ant.mkdir(dir: './jenkins_home/jobs')
}

task fetchJenkins << {
  if (!file(jenkinsWar).exists()) {
    download "http://mirrors.jenkins-ci.org/war/${jenkinsVersion}/${jenkinsWar}", jenkinsWar
  }
}

task fetchPlugins(dependsOn: [createDirectories]) << {
  downloadPlugin "git", "2.0"
  downloadPlugin "ec2", "1.20"
  downloadPlugin "gradle", "1.23"
  downloadPlugin "greenballs", "1.13"
  downloadPlugin "node-iterator-api", "1.1"
  downloadPlugin "scm-api", "0.1"
  downloadPlugin "git-client", "1.4.4"
  downloadPlugin "ssh-agent", "1.3"
}

task updateConfiguration(dependsOn: [createDirectories]) << {
  copy {
    from("./jobs") {
      include '**/*.xml'
    }
    into "./jenkins_home/jobs"
  }
}

task prepareJenkins(dependsOn: [createDirectories, fetchJenkins, fetchPlugins, updateConfiguration])

def download(String url, String filePath) {
  new File(filePath) << new URL(url).openStream()
}

def downloadPlugin(String pluginId, String version) {
  if (!(new File("./jenkins_home/plugins/${pluginId}.jpi").exists())) {
    download "http://mirrors.jenkins-ci.org/plugins/${pluginId}/${version}/${pluginId}.hpi", "./jenkins_home/plugins/${pluginId}.jpi"
  }
}

